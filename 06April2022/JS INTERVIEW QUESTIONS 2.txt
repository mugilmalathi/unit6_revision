1. Give an example where call apply bind is. required?

    var car = { 
    registrationNumber: "GA12345",
    brand: "Toyota",

    displayDetails: function(){
        console.log(this.registrationNumber + " " + this.brand);
    }
}
--------------
var car = { 
    registrationNumber: "GA12345",
    brand: "Toyota",

    displayDetails: function(ownerName){
        console.log(ownerName + ", this is your car: " + this.registrationNumber + " " + this.brand);
    }
}


     * In the above example If we call,
             car.displayDetails(); It will Work.

             But, If I use 
             
                var details = car.displayDetails();
                details(); then, it will not Work.

     * So, we can use bind, call and apply to achieve this.

     * If I am using bind method I can write this,

        var details = car.displayDetails.bind(car);
        details();
          
            - it will creates a new function where this refers to the
            car function. this way the bind method enables calling a 
            function with the specified this value.

     * Similarly but slightly different usage provide call() and apply()
     methods.

     * Call:-
           displayDetails.call(car, 'Vivian');

           We can give the value as a string and an array both will accept using 
           call function.
     * Apply:-
            displayDetails.call(car, ['Vivian']);

            We need gto give the value as an array only. We cannot give string.

2. What is the difference between readFile and readFileSync?

     * There are two types of reading files. They are,

          1. Buffer
          2. Streams

     * In Buffer there are two types of methods. like,

          1. readFile()
          2. readFileSync()

     * readFileSync() - method uses a variable to store the file content and then delivers it. Due to its blocking nature,
      the program waits till the file is read completely. 

     * readFile() - method uses a callback function. Due to its non-blocking nature, the program
      wont wait for the file to be read completely.


3. What does process in node.js mean?

     - Node.js provides the facility to get process information such as process id, architecture, platform, version,
      release, uptime, upu usage etc. It can also be used to kill process, set uid, set groups, unmask etc.

4. Explain what node.js is?

     * node Js is an open source develoment platform for executing javascript
     code server side.
     * Node Js is to run on a dedicated HTTP server and to employ a single
     thread with one process at a time and nodejs applications are event-based and run asynchronously.

5. What is the difference of JS from browser to JS on node.js

     * Javascript is a scripting language. and it is a high level programming languages
     that uses the concept of Oops but it is based on prototype inheritance.

     * NodeJs is a cross-platform and opensource javascript runtime environment that allows 
     the javascript to be run on server-side. Nodejs allows Javascript code to run outside the 
     browser. Nodejs comes with a lot of modules and mostly used in web development. 

6. Reverse a String.

     1. Inbuild Method:-
         
          function reverseString(str) {
              return str.split("").reverse().join("");
          }
          reverseString("mugil");

     2. Iterative Method:-
          
          var str = "mugil";
          var bag = '';
          for(var i=str.length-1; i>=0; i--){
              bag += str[i];
          }
          console.log(bag);

     3. Recursive Method:-

          function reverse(str, length){
              if(length == str.length){
                  return "";
              }
              reverse(str, length+1)
              return str[length];
          }
          console.log(reverse("mugil", 0));

7. Write a program to check two objects are equal ( deep equal )

     method1:-

          var dog1 = ["Snow", 3, "German Shepherd"];
          var dog2 = ["Snow", 3, "German Shepherd"];

          var res = dog1.equals(dog2);

     method2:-

          var dog1 = ["Snow", 3, "German Shepherd"];
          var dog2 = ["Snow", 3, "German Shepherd"];

          if(dog1 === dog2){
              console.log("True");
          }else{
              console.log("False");
          }

8. What is shallow equal?

     * Shallow equal is used to compare both array or both objects are 
     exactly same or not. There are two ways to calculate like,

     shallowEqualArrays([1, 2, 3], [1, 2, 3]); It return true
     shallowEqualArrays([{ a: 5 }], [{ a: 5 }]); It return false

     shallowEqualObjects({ a: 5, b: "abc" }, { a: 5, b: "abc" }); It return true
     shallowEqualObjects({ a: 5, b: {} }, { a: 5, b: {} }); It return false




video link:- 

https://drive.google.com/file/d/1nUZGYkCUEcKQNqKax5GsQslyEI64GiLz/view?usp=sharing
1. Create a function called toggler using closures


     function toggler(arr){
         var i = -1;
         
         return function(){
             if(i>=arr.length){
                 i=0;
             }
             return arr[index]
         }
     }

     const toggle1 = toggler([1, 2, 3, 4, 5]);

     console.log(toggle1())
     console.log(toggle1())
     console.log(toggle1())
     console.log(toggle1())
     console.log(toggle1())

     const toggle2 = toggler(['On', 'Off']);

     console.log(toggle2())
     console.log(toggle2())
     console.log(toggle2())
     console.log(toggle2())
     console.log(toggle2())


2. What are IIFE?


     IIFE is Immediately Invoked Function Expression. it is a javascript 
     function that runs as soon as it is defined.

     For Example,

     (function(){
         console.log('Hello..!')
     })();

     In the above example It's look like function inside the function. But
     It prevents to polluting the global scope.

     And then the second part like () function brackets immediately Invoked
     function expression through which the javascript engine will directly 
     interpret the function.

     And there are some other IIFE functions are there like,

     1. Arrow function IIFE:

          (()=>{
              console.log('Hello..!');
          })();

     2. Async IIFE:

          (async ()=>{
              console.log('Hello..!')
          })();


3. What is currying?

     Currying is an advanced technique of working with functions. 

     Currying is transformation of functions that translate a functions
     from function(a, b, c) into function(a)(b)(c).

     For Example,

     function curry(f){
         return function(a){
             return function(b){
                 return f(a, b);
             }
         }
     }
     function sum(a, b){
         return a+b;
     }

     let curriedsum = curry(sum)

     alert(curriedsum(1)(2));


4. Write a program to throttle using closures


var arr = [1, 2, 3];

for(var i=0; i<arr.length; i++){
  setTimeout(function(){
    console.log(i, this[i])
  }, i*1000)
}

output:

3 undefined
3 undefined
3 undefined

//rectify the issue using let instead of var
for(let i=0; i<arr.length; i++){
  setTimeout(function(){
    console.log(i, this[i])
  }, i*1000)
}

output:

0 1
1 2
2 3

//rectify the issue using arrow function also
for(var i=0; i<arr.length; i++){
  setTimeout(()=>{
    console.log(i, this[i])
  }, i*1000)
}

output:

0 1
1 2
2 3


5. Explain some areas where you have seen currying being implemented in
 React / other libraries?


     In React Currying is helped a lot. We will easily return function
     with in the function in react. like as we will use the route function
     in react we'll use currying method to return the functions.